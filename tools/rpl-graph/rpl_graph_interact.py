import re
import urllib2

import pydot
import socket
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

# this dictionnary was generated by :
# 1- starting the experiment as described in
# https://www.iot-lab.info/tutorials/contiki-ipv6-stack-and-tools/
# with the serial-line agregator running on the ssh-frontend(experiment-cli get -r | ./serial_aggregator.py > log )
# 2-then :
# grep FE80 log | cut -f2-3 -d ';' | sort | sed 's/m3-\(.*\); FE80::\(.*\)/\"\2\":\1,/g'

grenoble_m3={
"323.4501.2671.343":"113",
"323.4501.2879.343":"114",
"323.4501.471.343":"115",
"323.4501.969.343":"116",
"323.4501.2262.243":"117",
"323.4501.1376.343":"118",
"323.4501.2180.343":"122",
"323.4501.4276.343":"123",
"323.4501.1772.343":"124",
"323.4501.1672.343":"125",
"323.4501.2272.343":"130",
"323.4501.1369.343":"131",
"323.4501.2369.343":"132",
"323.4501.2360.243":"133",
"323.4501.2069.343":"134",
"323.4501.1761.243":"135",
"323.4501.1669.343":"136",
"323.4501.2778.343":"139",
"323.4501.3483.343":"140"
}

def ip2node(addr):
  return grenoble_m3.get(addr,addr)


def displaygraph():
#  plt.ion()
  graph.write_png('RPL.png')
  img = mpimg.imread( 'RPL.png')
  #plt.clf()
  imgplot=plt.imshow( img )
#  plt.show(block=False)
  plt.show()

def processaddr(sourceaddr):
  print "processing ", sourceaddr , "(" , NodeList.index(sourceaddr)+1 , "/" , len(NodeList) , ")"
  stripedsourceaddr=re.sub(":",".", sourceaddr)
  try:
      raw=urllib2.urlopen("http://[aaaa::"+sourceaddr+"]",timeout=30).read()
      VisitedList.append(sourceaddr)
      res=re.split("\n|<pre>", raw)
      readingroutes=0
      for addr in res:
          if readingroutes==0 :
              if "Routes" in addr:
                  readingroutes=1
              elif '::' in addr :
                  stripedaddr=re.sub(".*::","",addr)
                  if stripedaddr in NodeList :
                      print stripedaddr+" is also near "+sourceaddr
                  else : 
                      print stripedaddr+" is new, near "+sourceaddr
                      NodeList.append(stripedaddr)
                  graph.add_node(pydot.Node(ip2node(stripedsourceaddr)))
                  graph.add_edge(pydot.Edge(ip2node(stripedsourceaddr),ip2node(re.sub(":",".",stripedaddr)),color="grey"))
          elif "::" in addr :
              pair=[]
              pair=re.split("\/128 \(via |\) lus",addr)
              pair[0]=re.sub(".*::","",pair[0])
              pair[1]=re.sub(".*::","",pair[1])
              if pair[0]==pair[1] :
                  print "New direct route from "+ sourceaddr+" to "+ pair[0]
                  graph.add_edge(pydot.Edge(ip2node(stripedsourceaddr),ip2node(re.sub(":",".",pair[0])),color="blue"))
              else :
                  print "New route to "+ pair[0]+" via "+ pair[1]
                  graph.add_edge(pydot.Edge(ip2node(re.sub(":",".",pair[1])),ip2node(re.sub(":", ".",pair[0])),color="red"))
      displaygraph()
  except (urllib2.URLError,socket.timeout): 
    print "node "+sourceaddr+" not responding"
    if sourceaddr in Retries : 
        Retries[sourceaddr]=Retries[sourceaddr]+1
        if Retries[sourceaddr]==6 :
            print "  and will not be tried again"
            graph.add_node(pydot.Node(ip2node(stripedsourceaddr),style="filled", fillcolor="red"))
            
    else : 
        Retries[sourceaddr]=1

  for addr in NodeList :
     if not addr in VisitedList :
         if (not addr in Retries) or Retries[addr]<6 :  
             processaddr(addr)



#BRaddr="323:4501:3483:343"
BRaddr="323:4501:2879:343"

NodeList=[]
VisitedList=[]
Routes=[]
Retries={}
graph = pydot.Dot(graph_type='digraph')

graph.add_node(pydot.Node(ip2node(re.sub(":",".",BRaddr)), shape="box"))

NodeList.append(BRaddr)
processaddr(BRaddr)

#BRstriped=re.sub(".*::","",BRaddr)
  
print NodeList            
print Routes

graph.write('RPL.dot')


            
